<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">

    <title>Nittro Demo</title>

    <!--
        In a production app we'd probably use the Nittro Custom Builder to
        pack all the stylesheets into one file, but for the demo purposes
        this will do just as nicely.
     -->

    <link rel="stylesheet" type="text/css" href="{$basePath}/css/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="{$basePath}/css/nittro.min.css" />
    <link rel="stylesheet" type="text/css" href="{$basePath}/css/demo.css" />

    <!-- Initialise the _stack library -->
    <script type="application/javascript">window._stack = [];</script>
  </head>

  <body>
    <!--
        Don't forget "async" and "defer" :-)
     -->
    <script type="application/javascript" src="{$basePath}/js/nittro.min.js" async defer></script>

    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <a n:href="Homepage:default" class="navbar-brand">Nittro Demo</a>
        </div>
      </div>
    </nav>

    <div class="container">
      <header class="jumbotron" n:snippet="header" n:inner-block="header">
        <h1>Nittro Demo</h1>
      </header>

      <!--
          This is all that's needed to render the presenter's flash messages.
          The bonus is that the HTML structure this will create when rendering
          flash messages in the template will be the same as when flashes are
          rendered by Nittro, so they'll look the same.
       -->
      <div n:flashes></div>

      <!-- Let's also make things look a little more alive -->
      <article n:snippet="content" n:inner-block="content" class="nittro-transition-auto nittro-transition-fade"></article>

    </div>
  </body>
</html>
